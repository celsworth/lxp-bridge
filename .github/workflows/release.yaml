on:
  release:
    types:
      - published

name: Release

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: celsworth
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${{github.ref_name}})

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ci/Dockerfile
          push: true
          tags: celsworth/lxp-bridge:latest,celsworth/lxp-bridge:${{steps.vars.outputs.tag}}
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    strategy:
      matrix:
        include:
        - build: linux-x86_64
          os: ubuntu-latest
          toolchain: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-aarch64
          os: ubuntu-latest
          toolchain: stable
          target: aarch64-unknown-linux-gnu
        - build: linux-arm
          os: ubuntu-latest
          toolchain: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos-x86_64
          os: macos-11
          toolchain: stable
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-11
          toolchain: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-2019
          toolchain: stable
          target: x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            /usr/share/rust
            ~/.cargo
            target
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build OpenSSL
        if: matrix.build == 'linux-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armel-cross
          echo CC_arm_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc >>$GITHUB_ENV
          cd ~
          wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz
          tar xzf openssl-1.1.1l.tar.gz
          export MACHINE=arm
          export ARCH=arm
          export CC=arm-linux-gnueabihf-gcc
          cd openssl-1.1.1l && ./config shared && make
          echo OPENSSL_LIB_DIR=~/openssl-1.1.1l >>$GITHUB_ENV
          echo OPENSSL_INCLUDE_DIR=~/openssl-1.1.1l/include >>$GITHUB_ENV

      - name: Build OpenSSL
        if: matrix.build == 'linux-aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          echo CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc >>$GITHUB_ENV
          cd ~
          wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz
          tar xzf openssl-1.1.1l.tar.gz
          export MACHINE=aarch64
          export ARCH=aarch64
          export CC=aarch64-linux-gnu-gcc
          cd openssl-1.1.1l && ./config shared && make
          echo OPENSSL_LIB_DIR=~/openssl-1.1.1l >>$GITHUB_ENV
          echo OPENSSL_INCLUDE_DIR=~/openssl-1.1.1l/include >>$GITHUB_ENV

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Set release version
        shell: bash
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "release version: $RELEASE_VERSION"
      - name: Build archive
        shell: bash
        run: |
          staging="lxp-bridge-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp "config.yaml.example" "$staging/"
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/lxp-bridge.exe" "$staging/"
          else
            cp "target/${{ matrix.target }}/release/lxp-bridge" "$staging/"
            strip "$staging/lxp-bridge" || true
          fi
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
      - name: Attach archive to release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          hub release edit -m "" -a ${{ env.ASSET }} ${{ github.event.release.tag_name }}
